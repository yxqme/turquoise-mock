{"code":"import jsonServer from 'json-server';\r\nimport Mock from 'mockjs';\r\nimport chokidar from 'chokidar';\r\nimport { sourcePath, getUserConfig, loadDBSchemas, loadRoutes, loadRandomExtend, loadMiddlewares, } from './utils';\r\nlet server;\r\nlet sockets = [];\r\n// 启动服务\r\nexport default function boot() {\r\n    const userConfig = getUserConfig();\r\n    const [DBSchemas, routes, randomExtend, middlewares] = [\r\n        loadDBSchemas('mock/schemas'),\r\n        loadRoutes('mock/routes'),\r\n        loadRandomExtend('mock/random'),\r\n        loadMiddlewares('mock/middlewares'),\r\n    ];\r\n    if (Mock.Random.extend) {\r\n        Mock.Random.extend(randomExtend);\r\n    }\r\n    const app = jsonServer.create();\r\n    const router = jsonServer.router(Mock.mock(DBSchemas));\r\n    const jsonServerMiddlewares = jsonServer.defaults({\r\n        static: __dirname + '/public',\r\n    });\r\n    app.use(jsonServerMiddlewares);\r\n    app.use(jsonServer.rewriter(userConfig.rewriter));\r\n    app.use(jsonServer.bodyParser);\r\n    middlewares.forEach((middleware) => {\r\n        app.use(middleware);\r\n    });\r\n    routes.forEach((router) => {\r\n        app[router.method || 'get'](router.path, router.controller);\r\n    });\r\n    if (userConfig.render) {\r\n        router.render = userConfig.render;\r\n    }\r\n    app.use(router);\r\n    server = app.listen(userConfig.port, () => {\r\n        console.log('Mock Server is running, http://localhost:' + userConfig.port);\r\n    });\r\n    server.on('connection', socket => {\r\n        sockets.push(socket);\r\n    });\r\n}\r\nboot();\r\nconst watcher = chokidar.watch(sourcePath);\r\nwatcher.on('change', path => {\r\n    Object.keys(require.cache).forEach(function (id) {\r\n        if (path === id) {\r\n            delete require.cache[id];\r\n        }\r\n    });\r\n    sockets.forEach(socket => {\r\n        if (socket.destroyed === false) {\r\n            socket.destroy();\r\n        }\r\n    });\r\n    sockets = [];\r\n    server.close(() => {\r\n        boot();\r\n    });\r\n});\r\n//# sourceMappingURL=index.js.map","references":["/Users/yangxiaoqiang/code/npm/turquoise-mock/src/utils.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yangxiaoqiang/code/npm/turquoise-mock/src/index.d.ts","writeByteOrderMark":false,"text":"export default function boot(): void;\r\n"}}
